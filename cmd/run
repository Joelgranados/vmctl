#!/usr/bin/env bash
# SPDX-License-Identifier: GPL-3.0-or-later
# Copyright (c) 2020 Samsung Electronics Co., Ltd. All Rights Reserved.
#
# Written by Klaus Jensen <its@irrelevant.dk>

set -euo pipefail

#shellcheck source=common/rc
source "${BASEDIR}/common/rc"

for rc in "${BASEDIR}"/lib/qemu/*; do
  #shellcheck disable=SC1090
  source "$rc"
done

USAGE="usage: ${BASENAME} -c CONFIG run [OPTION...]

The \`run\` command launches the virtual machine defined by the given
\`CONFIG\`.

Options:
  -h, --help                display this help message and exit
  -k, --kernel-dir DIR      directory containing the kernel source. The
                            directory will be made available to the vm as a 9p
                            virtfs with mount tag 'kernel_dir'
  -c, --cloud-init          use '\${VMIMG}/seed.img' as a cloud-init seed
  -b, --background          start in the background
  -g, --gdb                 launch under gdb
  -p, --perf                perf record
  -f, --reset               recreate images associated with devices
  -n, --print               print invocation command instead of executing it
  -t, --trace EVENT,...     enable/disable trace event (seperated by commas).
                            Example: '-t nvme' enables all trace events with
                            the nvme prefix. Disable events by prefixing the
                            event with a '-'"

_run() {
  local short="k:cd:bnfgpt:h"
  local long="kernel-dir:,cloud-init,background,print,reset,gdb,perf,trace:,help"

  if ! tmp=$(getopt -o "$short" --long "$long" -n "$BASENAME" -- "$@"); then
    exit 1
  fi

  eval set -- "$tmp"
  unset tmp

  while true; do
    case "$1" in
      '-k' | '--kernel-dir' )
        local kernel_dir="$2"; shift 2

        if [[ ! -d "$kernel_dir" ]]; then
          _fatal 1 "no such directory: '$kernel_dir'"
        fi
        ;;

      '-c' | '--cloud-init' )
        local do_cloud_init=1; shift
        ;;

      '-b' | '--background' )
        local do_background=1; shift
        ;;

      '-n' | '--print' )
        local do_print=1; shift
        ;;

      '-f' | '--reset' )
        RESET=1; shift
        ;;

      '-g' | '--gdb' )
        local do_gdb=1; shift
        ;;

      '-p' | '--perf' )
        local do_perf=1; shift
        ;;

      '-t' | '--trace' )
        local trace_events="$2"; shift 2
        ;;

      '-h' | '--help' )
        _usage "$USAGE" 0
        ;;

      '--' )
        shift; break
        ;;

      * )
        _usage "$USAGE" 1
        ;;
    esac
  done

  readonly RESET

  _load_vm

  if [[ ! -f "${VMROOT}/$GUEST_BOOT" && ! -v do_print ]]; then
    if [[ ! -f "${VMROOT}/$GUEST_BOOT_BASE" ]]; then
      _fatal 1 "base image '${VMROOT}/${GUEST_BOOT_BASE}' does not exist"
    fi

    _log "creating boot image ('$GUEST_BOOT') from base ('$GUEST_BOOT_BASE')"
    _log_named "qemu-img create" "$QEMU_IMG" create -f qcow2 -b "$(basename "$GUEST_BOOT_BASE")" \
      -F qcow2 "${VMIMG}/$(basename "$GUEST_BOOT")" "$GUEST_BOOT_SIZE"
  fi

  if [[ -v do_gdb && -v do_background ]]; then
    _fatal 1 "--gdb cannot be used with --background"
  fi

  if [[ -f "${VMRUN}/pidfile" ]]; then
    if pidof "$QEMU_SYSTEM_BINARY" >/dev/null; then
      _fatal 1 "'${VMRUN}/pidfile' exists; vm might already be running"
    else
      _log "removing the stale '${VMRUN}/pidfile'"
      rm -f "${VMRUN}/pidfile"
    fi
  fi

  local setup_fn
  setup_fn="$(echo "_setup_${VMNAME}" | tr - _)"
  if ! declare -f "$setup_fn" >/dev/null; then
    _fatal 1 "no '$setup_fn' function defined in '$VMCONFIG'"
  fi

  pushd "$(dirname "$VMCONFIG")" >/dev/null
  if ! eval "$setup_fn"; then
    _fatal 1 "could not setup vm '$VMNAME'"
  fi
  popd >/dev/null

  for logfile in full stderr qemu.log; do
    truncate -s 0 "${VMLOG}/${logfile}"
  done

  if [[ -v do_cloud_init ]]; then
    if [[ ! -f "${VMIMG}/seed.img" ]]; then
      _fatal 1 "no such file: '${VMIMG}/seed.img'"
    fi

    qemu_drive_add "cloud-init-seed" \
      --file "img/seed.img" \
      --format "raw" \
      --interface "virtio"
  fi

  QEMU_PARAMS+=("-pidfile" "${VMROOT}/run/${VMNAME}/pidfile")

  if [[ -v kernel_dir ]]; then
    local cmdline_extra=""
    if [[ -v cloud_init_seed ]]; then
      cmdline_extra="ci.datasource=NoCloud"
    fi

    qemu_kern_add_custom --kernel-dir "${kernel_dir}" \
      --cmdline-extra "${cmdline_extra}"
  fi

  if [[ -v do_background ]]; then
    QEMU_PARAMS+=("-daemonize")

    # serial and monitor
    QEMU_PARAMS+=("-serial" "unix:${VMROOT}/run/${VMNAME}/console,server,nowait")
    QEMU_PARAMS+=("-monitor" "unix:${VMROOT}/run/${VMNAME}/monitor,server,nowait")
  else
    QEMU_PARAMS+=("-serial" "mon:stdio")
  fi

  # log guest output
  QEMU_PARAMS+=(
    "-d" "guest_errors"
    "-D" "${VMROOT}/log/${VMNAME}/qemu.log"
  )

  if [[ -v trace_events ]]; then
    if [[ "$trace_events" == "all" ]]; then
      QEMU_PARAMS+=("-trace" "*")
    else
      local _IFS="$IFS"
      IFS=$','
      for event in $trace_events; do
        QEMU_PARAMS+=("-trace" "${event}*")
      done
      IFS="$_IFS"
    fi
  fi

  params=("${QEMU_PARAMS[@]}")

  if [[ -v do_print ]]; then
    if [[ -v VMPRE ]]; then
      echo "Before QEMU:"
      for cmd in "${VMPRE[@]}"; do
        echo -n "  $cmd"
        echo
      done
    fi
    echo

    local nargs="${#params[@]}"

    echo "$QEMU_SYSTEM_BINARY \\"
    for (( i=0 ; i < nargs ; i++ )); do
      echo -n "  ${params[i]}"

      if [[ -n "${params[i+1]}" && "${params[i+1]}" != -* ]]; then
        echo -n " $(_shell_quote "${params[i+1]}")"
        (( i++ ))
      fi

      if [[ $(( i + 1)) -lt "$nargs" ]]; then
        echo " \\"
      fi
    done

    echo

    exit 0
  fi

  if command -v _pre > /dev/null; then
    _pre
  fi

  if [[ -v VMPRE ]]; then
    for cmd in "${VMPRE[@]}"; do
      if ! eval "$cmd" ; then
        _fatal 1 "Evaluation of ${cmd} failed"
      fi
    done
  fi

  if [[ -v do_gdb ]]; then
    gdb -ex "handle SIGUSR1 pass noprint" -ex "handle SIGPIPE nostop" --args "$QEMU_SYSTEM_BINARY" "${params[@]}"
    #lldb -- "$QEMU_SYSTEM_BINARY" "${params[@]}"
  elif [[ -v do_perf ]]; then
    perf record "$QEMU_SYSTEM_BINARY" "${params[@]}"
  else
    if [[ -v do_background ]]; then
      _log "launching in background"
      _log "use \`vmctl -c $VMCONFIG {ssh,console,monitor}\` to attach to the vm"
    fi

    $QEMU_SYSTEM_BINARY "${params[@]}"
  fi

  if command -v _post > /dev/null; then
    _post
  fi
}
