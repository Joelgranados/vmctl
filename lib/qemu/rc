#!/bin/bash
# SPDX-License-Identifier: GPL-3.0-or-later
# Copyright (c) 2020 Samsung Electronics Co., Ltd. All Rights Reserved.
#
# Written by Klaus Jensen <its@irrelevant.dk>

_create_image() {
  local format="raw"

  local long="backing:,format:,size:,force"

  if ! tmp=$(getopt -o "" --long "$long" -n "${FUNCNAME[0]}" -- "$@"); then
    exit 1
  fi

  eval set -- "$tmp"
  unset tmp

  while true; do
    case "$1" in
      '--backing' )
        local backing="$2"; shift 2

        if [[ ! -r "$backing" ]]; then
          _error "${FUNCNAME[0]}: cannot read '$backing'"
        fi

        ;;
      '--format' )
        format="$2"; shift 2
        ;;
      '--size' )
        local size="$2"; shift 2
        ;;
      '--force' )
        local do_force=1; shift
        ;;
      '--' )
        shift; break
        ;;
      * )
        _fatal 1 "unknown argument '$1'"
        ;;
    esac
  done

  if [[ $# -ne 1 ]]; then
    echo "${FUNCNAME[0]}: missing image name"
  fi

  local file="$1"; shift

  if [[ -f "$file" && ! -v do_force ]]; then
    return 0
  fi

  if [[ ! -v size ]]; then
    _fatal 1 "missing required 'size' argument"
  fi

  local args=("-f" "$format")

  if [[ -v backing ]]; then
    args+=("-b" "$backing")
  fi

  _log_named "qemu-img/create" "$QEMU_IMG" create "${args[@]}" "$file" "$size"
}

qemu_drive_add() {
  local format="raw"
  local intf="none"
  local discard="off"
  local media="disk"
  local read_only="no"
  local extra

  local long="file:,format:,interface:,discard,cdrom,create,size:,extra:,read-only"

  if ! tmp=$(getopt -o "" --long "$long" -n "${FUNCNAME[0]}" -- "$@"); then
    exit 1
  fi

  eval set -- "$tmp"
  unset tmp

  while true; do
    case "$1" in
      '--file' )
        local file="/$2"; shift 2
        ;;

      '--format' )
        format="$2"; shift 2
        ;;

      '--interface' )
        intf="$2"; shift 2
        ;;

      '--discard' )
        discard="unmap"; shift
        ;;

      '--read-only' )
        read_only="yes"; shift
        ;;

      '--cdrom' )
        media="cdrom"; shift
        ;;

      '--create' )
        local do_create=1; shift
        ;;

      '--size' )
        local size="$2"; shift 2;
        ;;

      '--extra' )
        local extra="$2"; shift 2;
        ;;

      '--' )
        shift; break;
        ;;

      * )
        _fatal 1 "unknown argument '$1'"
        ;;
    esac
  done

  if [[ $# -ne 1 ]]; then
    _fatal 1 "missing drive id"
  fi

  local id="$1"

  if [[ ! -v file ]]; then
    local file="/state/${VMNAME}/${id}.img"
  fi

  if [[ ! -v DOCKER_IMAGE ]]; then
    file="${VMROOT}${file}"
  fi

  if [[ -v do_create ]]; then
    if [[ ! -v size ]]; then
      _fatal 1 "--create requires --size"
    fi

    if [[ ! -f "${VMSTATE}/${id}.img" || -v RESET ]]; then
      _create_image "${VMSTATE}/${id}.img" --size "$size" --format "$format" --force
    fi
  fi

  local params="id=${id},file=$file,format=$format,if=$intf,discard=$discard,media=$media,read-only=$read_only"

  if [[ -v extra ]]; then
    params="${params},${extra}"
  fi

  QEMU_PARAMS+=("-drive" "$params")
}
